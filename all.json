[
  {
    "model": "selfedu.chapter",
    "pk": 3,
    "fields": {
      "name": "Основы веба",
      "image": "selfedu/1006771.png",
      "description": "О курсе «Основы веб-разработки на Django»\r\n\r\nВы приступаете к изучению курса «Основы веб-разработки на Django». На курсе вы будете знакомиться с основными концепциями и инструментами фреймворка Django — одного из самых популярных фреймворков для веб-разработки на Python.",
      "last_update": "2023-12-07T18:16:43Z"
    }
  },
  {
    "model": "selfedu.chapter",
    "pk": 4,
    "fields": {
      "name": "Знакомство с Django",
      "image": "selfedu/django-icon-1606x2048-lwmw1z73.png",
      "description": "В данном разделе:\r\n- Узнаем, что такое фреймворк.\r\n- Рассмотрим преимущества фреймворка Django.\r\n- Познакомимся с паттерном MVC.\r\n- Научимся создавать новый проект на Django.\r\n- Узнаем, как настроить проект и создать приложение.\r\n- Научимся описывать обработку запросов.",
      "last_update": "2023-12-07T18:18:31Z"
    }
  },
  {
    "model": "selfedu.chapter",
    "pk": 5,
    "fields": {
      "name": "Работа с ORM в Django",
      "image": "selfedu/orm.webp",
      "description": "В данном разделе:\r\n-Познакомимся с Django ORM.\r\n-Научимся работать с моделями.\r\n-Разберемся, как устроена админка.\r\n-Поработаем с базами данных.",
      "last_update": "2023-12-07T18:21:36Z"
    }
  },
  {
    "model": "selfedu.chapter",
    "pk": 6,
    "fields": {
      "name": "Шаблонизация",
      "image": "selfedu/download.png",
      "description": "В данном разделе:\r\n-Узнаем, что такое шаблонизация и зачем она нужна.\r\n-Разберемся, как выделять базовые шаблоны и подшаблоны.\r\n-Научимся работать с шаблонными переменными, тегами и фильтрами.\r\n-Узнаем, как писать собственные шаблонные теги и фильтры.",
      "last_update": "2023-12-07T18:23:01Z"
    }
  },
  {
    "model": "selfedu.material",
    "pk": 7,
    "fields": {
      "chapter": 3,
      "name": "Введение в веб",
      "image": "selfedu/1.jpg",
      "video": null,
      "description": "Что такое веб и для чего он нужен\r\n‍Веб — общее понятие, которое включает в себя любые приложения, которые работают по сети. Такие приложения доступны для работы в браузере и на мобильных устройствах, а также обеспечивают взаимодействие между другими приложениями.\r\n\r\nЛюбой сайт или сервис, которым вы пользуетесь онлайн, является частью веба и включает в себя работу в браузере / мобильном приложении или подразумевает межсерверное взаимодействие, чтобы обеспечивать работоспособность сервиса.\r\n\r\nК веб-сервисам относятся:\r\n\r\nсайты,\r\nчат-боты,\r\nCRM (система управления клиентами),\r\nERP (система управления предприятием),\r\nLMS (система управления учебным процессом),\r\nавтоматизация (задачи по автоматическим рассылкам писем/сообщений или автоматические платежи и т. д.),\r\nинтеграции (платежные системы),\r\nмобильные приложения,\r\nонлайн-игры\r\nи многое другое.\r\nОбласть применения веб-сервисов велика, и рынок заполнен заказами и работой над ними. На 2021 год официально было зарегистрировано около 1,88 млрд сайтов, при этом уникальных пользователей у этих сайтов в общей сложности около 4,6 млрд. Создание веб-сервисов имеет большой спрос. На апрель 2023 года только на фриланс-биржах РФ рынок создания веб-сервисов равен $41 млрд.\r\n\r\nДавайте разбираться с тем, как устроен веб, как подключиться к рынку веб-сервисов и как стать конкурентоспособным разработчиком.",
      "last_update": "2023-12-07T18:24:57Z"
    }
  },
  {
    "model": "selfedu.material",
    "pk": 8,
    "fields": {
      "chapter": 3,
      "name": "Сеть",
      "image": "selfedu/2.jpg",
      "video": null,
      "description": "Благодаря компьютерным сетям у нас есть возможность общаться друг с другом и получать доступ к любым сервисам во всем мире. Давайте разберемся, что такое сеть.\r\n\r\nКомпьютерная сеть — объединение компьютеров или серверов, каждый из которых имеет свой уникальный адрес.\r\n\r\nВнутри компьютерной сети каждый пользователь определяется IP-адресом.\r\n\r\nIP-адрес — специальный адрес, который позволяет идентифицировать компьютер или сервер в глобальной сети.\r\n\r\nIP-адрес может быть «белым» или «серым». У частных компьютеров часто встречаются «серые» адреса, то есть неуникальные для глобальной сети. У серверов адреса всегда уникальные, т. е. «белые».\r\n\r\nЧтобы узнать IP-адрес своего компьютера или сервера, к которому есть доступ, используйте специальную команду в терминале:\r\n\r\nдля Linux:\r\nip -a\r\n — встроенная утилита, может устанавливаться отдельно.\r\n\r\n Windows:\r\nipconfig\r\n — встроенная утилита.\r\n\r\n Unix:\r\nifconfig\r\n — встроенная утилита, может устанавливаться отдельно.\r\n\r\nКак читать список сетевых интерфейсов\r\n\r\nКак правило, во всем списке сетевых интерфейсов есть интерфейс с названием \r\nlo\r\n. Он отвечает за локальное использование компьютера как веб-сервера, то есть делает замыкание сетевого интерфейса на этот же компьютер.\r\n\r\nИнтерфейс \r\neth0\r\n (может быть другой номер) отвечает за соединение по кабелю, а \r\nwlan0\r\n отвечает за сеть, к которой компьютер подключен по беспроводной сети Wi-Fi.\r\n\r\nДля общения по сети используются не только конкретные адреса, но и широковещательные адреса, которые принимают широковещательные запросы. Такие запросы отправляются на всю сеть, то есть рассчитаны на всех участников сети. А для отправки таких запросов используется широковещательный адрес.\r\n\r\nШироковещательный адрес — условный адрес, используется для рассылки широковещательных пакетов по сети.\r\n\r\nШироковещательный пакет — пакет, предназначенный для передачи всем участникам сети.",
      "last_update": "2023-12-07T18:42:27Z"
    }
  },
  {
    "model": "selfedu.material",
    "pk": 9,
    "fields": {
      "chapter": 3,
      "name": "Домен и DNS",
      "image": "selfedu/3.jpg",
      "video": null,
      "description": "Когда мы ищем что-то в интернете, то вводим не адрес, например 172.217.17.99, а пишем в браузере google.com. Такое возможно благодаря доменам.\r\n\r\nДомен — уникальное имя для любого сервиса, расположенного в глобальной сети Интернет; используется для однозначного позиционирования веб-приложения и удобного обращения для пользователей.\r\n\r\nПроще говоря, домен — это уникальное имя для вашего веб-приложения.\r\n\r\nНо где хранится информация обо всех доменах и привязке их к IP-адресам?\r\n\r\nЗа это отвечает DNS.\r\n\r\nDNS (Domain Name System — система доменных имен) — это распределенная система, которая хранит и распространяет информацию о доменных именах, чаще всего используется для определения IP-адреса по имени хоста.\r\n\r\nТаким образом, пользователь сначала попадает на DNS-сервер и после этого уже перенаправляется на конечный сервер.\r\n\r\nВажно знать, что DNS — это не один единственный сервер с хранением всего, что есть в интернете, а один из узлов общей сети, которая может предоставлять информацию о доменах и IP-адресах.\r\n\r\nВажные свойства DNS\r\nСама по себе система доменных имен полностью распределенная. Есть некоторые самые большие узлы, например у Google один из самых популярных — 8.8.8.8. А есть поменьше, которые содержат в себе похожую информацию, то есть дублируют каждый из узлов. При неработоспособности одного узла подключается другой, и информация не теряется.\r\nДанная система кешируемая. Когда доменное имя запрашивается, система проверяет кеш на наличие запрашиваемой информации. Если она находится в кеше, то система сразу же отдает данные и не отправляет запрос в Глобальную паутину. Если информация не найдена в кеше, то система отправляет запрос в Глобальную паутину, чтобы получить информацию. После этого полученная информация кешируется для последующего использования.\r\nЭто резервируемая система. Для отдельных систем, которые расположены в различных странах, резервируются доменные имена, которые имеют региональную принадлежность, например домены групп \r\n.ru\r\n, \r\n.by\r\n, \r\n.de\r\n, а также IP-адреса, которые могут быть отнесены в Глобальной сети именно к этим странам или регионам. Таким образом, создание записей о новых доменах происходит быстрее.\r\nНе всегда домены регистрируются согласно их назначению и региону. Чтобы проверить доступность веб-сервиса, к которому привязан домен, используйте встроенную команду \r\ntraceroute\r\n. Эта команда есть в каждой операционной сети и позволяет пройти все узлы, через которые проходит запрос, прежде чем попадет на сервер с необходимым веб-сервисом.\r\n\r\nНапример:\r\n\r\nДля Windows:\r\ntracert google.com\r\n\r\nmacOS и Linux:\r\ntraceroute google.com",
      "last_update": "2023-12-07T18:43:33Z"
    }
  },
  {
    "model": "selfedu.material",
    "pk": 10,
    "fields": {
      "chapter": 3,
      "name": "Bootstrap",
      "image": "selfedu/4.jpg",
      "video": null,
      "description": "В ходе нашего обучения у вас нет верстальщиков, которые могли бы сверстать необходимые интерфейсы, и в работе часто случается так, что необходимо собрать интерфейс для внутренних админок или просто для служебных страниц, поэтому будем учиться создавать верстку самостоятельно.\r\n\r\nВерстка страниц — нередкая задача, поэтому появились UI kits, которые предоставляют набор уже готовых элементов, их можно использовать в своих проектах. Один из самых популярных UI kits — Bootstrap.\r\n\r\nBootstrap — cвободный набор инструментов для создания сайтов и веб-приложений. Включает в себя HTML- и CSS-шаблоны оформления для типографики, веб-форм, кнопок, меток, блоков навигации и прочих компонентов веб-интерфейса, включая JavaScript-расширения.\r\n\r\nЕсли рассматривать Bootstrap c точки зрения макета, то он имеет 12-колоночную верстку, которая позволяет гибко выстраивать интерфейсы, а также сохранять необходимую структуру.\r\n\r\nДля построения интерфейса не нужно создавать стили, достаточно их скачать, взять из документации необходимый элемент и использовать.\r\n\r\nВ Bootstrap имеется довольно большая библиотека элементов, таких как:\r\n\r\n \r\ncard\r\n — карточка с содержимым,\r\n \r\nbtn\r\n — кнопка,\r\n \r\nform\r\n — работа с формами и их содержимым,\r\n \r\nalert\r\n — уведомления и сообщения в интерфейсе.\r\nКод элементов можно копировать из документации Bootstrap. Для этого достаточно выполнить следующие действия:\r\n\r\nПерейти на сайт https://getbootstrap.com/docs/5.3/\r\nНайти подходящий раздел, например с кнопками.\r\nНайти подходящий вариант оформления, который отображается прямо на странице.\r\nСкопировать исходный код, который находится рядом с нужным элементом.\r\nВставить в HTML-документ в своем проекте.\r\nBootstrap поддерживает адаптивность. Это значит, что созданный интерфейс будет динамически подстраиваться под разрешение устройства, на котором открывается страница.\r\n\r\nУ Bootstrap имеется три типа разрешений:\r\n\r\nмобильные устройства — \r\nsm\r\n: \r\ncol-sm-N\r\n;\r\nпланшеты —\r\nmd\r\n;\r\nкомпьютеры (desktop) — \r\nlg\r\n.\r\nАдаптивность поддерживается с помощью блоков \r\nrow\r\n и \r\ncol[-разрешение]-N\r\n, где \r\nrow\r\n — это строка с содержимыми колонками, а \r\ncol-...\r\n — это колонки, которые отвечают за размещение контента:\r\n\r\n<div class=\"row\">\r\n  <div class=\"col-6\"></div>\r\n</div>\r\n\r\nНачало сборки любого интерфейса с помощью Boostrap будет выглядеть примерно так:\r\n\r\n<!doctype html>\r\n<!-- Корень документа -->\r\n<html lang=\"en\">\r\n  <!-- Информация для браузера -->\r\n  <head>\r\n    <meta charset=\"utf-8\">\r\n    <meta name=\"viewport\" content=\"width=device-width, initial-scale=1\">\r\n    <!-- Заголовок страницы -->\r\n    <title>Bootstrap demo</title>\r\n    <!-- Подключение стилей -- >\r\n    <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.0/dist/css/bootstrap.min.css\" rel=\"stylesheet\" integrity=\"sha384-9ndCyUaIbzAi2FUVXJi0CjmCapSmO7SnpJef0486qhLnuZ2cdeRhO02iuK6FUUVM\" crossorigin=\"anonymous\">\r\n  </head>\r\n  <body>\r\n    <!-- Описание тела документа -->\r\n    <h1>Hello, world!</h1>\r\n  </body>\r\n</html>\r\n\r\nОбращайте внимание на то, какую версию Bootstrap вы используете. На этом и последующих уроках мы будем опираться на Bootstrap версии 5.",
      "last_update": "2023-12-07T18:45:45Z"
    }
  },
  {
    "model": "selfedu.material",
    "pk": 11,
    "fields": {
      "chapter": 4,
      "name": "MVC в Django",
      "image": "selfedu/1_5uTiTds.jpg",
      "video": null,
      "description": "Настало время разобраться с тем, что такое Django и из чего он состоит.\r\n\r\nDjango — это свободный фреймворк для веб-приложений на языке Python, использующий шаблон проектирования MVC.\r\n\r\nDjango включает в себя набор решенных проблем, например:\r\n\r\n подключение к базе данных,\r\n авторизацию,\r\n администрирование,\r\n шаблонизацию,\r\n маршрутизацию.\r\nMVC — это схема, или паттерн, разделения данных приложения и управляющей логики на три отдельных компонента:\r\n\r\n модель (Model),\r\n представление (View),\r\n контроллер (Controller).\r\nТаким образом, модификация каждого компонента может осуществляться независимо.\r\n\r\nВ Django модель проектирования изменена из-за терминологии — MVC превращается в MTV, так как:\r\n\r\n Слой Model всё так же является слоем Model в Django.\r\n Слой View стал Template, потому что за отображение в Django отвечает модуль Template.\r\n Слой Controller переехал в файлы views и стал View в значении обработчика отображения.\r\n\r\nРассмотрим паттерн MTV в Django :\r\n\r\n Модель (Model) представляет собой структуру данных, с которыми работает приложение. В Django модели — это классы на языке Python, которые наследуются от класса django.db.models.Model и определяют поля и отношения между данными.\r\n Представление (View) отвечает за обработку запросов от клиента и формирование ответа. В Django представление может быть функцией или классом, который принимает веб-запрос и возвращает веб-ответ. Здесь мы определяем, какие данные нужны и как их представить пользователю.\r\n Шаблон (Template) отвечает за то, как представить данные пользователю. В Django используется свой язык шаблонов, который позволяет вставлять данные из представления в HTML-код.\r\nШаблон MTV в Django позволяет упростить разработку и обеспечить независимость каждого компонента.",
      "last_update": "2023-12-07T18:48:01Z"
    }
  },
  {
    "model": "selfedu.material",
    "pk": 12,
    "fields": {
      "chapter": 4,
      "name": "Установка Django",
      "image": "selfedu/2_al4zgZY.jpg",
      "video": null,
      "description": "Несмотря на то, что Django — это фреймворк, работать с ним будем как с обычным пакетом, только с бо́льшим количеством настроек.\r\n\r\nВ первую очередь, мы будем использовать виртуальное окружение, которое можно создать с помощью pip + venv или Poetry:\r\n\r\n pip + venv — более привычный вариант, большая часть проектов работает в такой связке.\r\n Poetry — современный вариант, более удобный в плане отслеживания зависимостей и работы над запуском исходного кода.\r\nДля создания директории проекта и виртуального окружения используются команды:\r\n\r\n \r\nmkdir project\r\n — создаем новую директорию для проекта.\r\n \r\ncd project\r\n — переходим в созданную директорию.\r\n \r\npython3 -m venv env\r\n — создаем виртуальное окружение.\r\n \r\npip3 install django\r\n — устанавливаем пакет Django.\r\n \r\npip3 freeze >  requirements.txt\r\n — сохраняем список зависимостей.\r\nПосле создания виртуального окружения создайте проект с помощью команды:\r\n\r\ndjango-admin startproject config .\r\n\r\nТакже проект можно создавать не внутри директории, а положиться на утилиту, и тогда она создаст папку с проектом:\r\n\r\ndjango-admin startproject myproject\r\n\r\nКоманды отличаются тем, что в первом случае вся конфигурация проекта будет находиться в директории \r\nconfig\r\n, а во втором — все настройки проекта будут помещены в директорию, одноименную с проектом, то есть в \r\nmyproject\r\n.\r\n\r\nИзначально весь проект состоит из одного файла и директории в корне.\r\n\r\nmanage.py\r\n — файл, который является точкой входа для выполнения всех команд Django. Не нужно этот файл менять и что-то с ним делать: он генерируется автоматически и предназначен только для использования при вызове команд.\r\n\r\nconfig\r\n — директория, которая появляется при первом варианте создания проекта. Содержит все корневые или основные настройки проекта, с которыми мы будем работать в рамках каждого проекта, написанного на Django. Внутри директории имеется своя структура файлов:\r\n\r\n \r\n__init__.py\r\n — файл для инициализации пакета; мы его трогать не будем.\r\n \r\nasgi.py\r\n — файл для запуска асинхронного сервера; также пока не будет использоваться.\r\n \r\nsettings.py\r\n — файл со всеми настройками проекта, которые мы можем менять или дописывать, включая полностью кастомные настройки.\r\n \r\nurls.py\r\n — файл, который является точкой входа для пользователя, когда он открывает любую страницу веб-сервиса; отвечает за маршрутизацию по проекту.\r\n \r\nwsgi.py\r\n — файл для запуска синхронного сервера; при запуске нашего проекта мы будем использовать именно его, но не в явном виде, а через специальную команду.\r\nПомимо этого, Django требователен к настройкам проекта. Так, чтобы использовать новые приложения, которые мы будем создавать, необходимо их «устанавливать». Это происходит путем прописывания в файле \r\nsettings.py\r\n нового приложения:\r\n\r\nINSTALLED_APPS = [\r\n\t\t...\r\n    'students', # новое созданное приложение\r\n]\r\n\r\nЧтобы к проекту можно было подключать стили и HTML-верстку, согласно дизайну проекта, нам нужна настройка работы со статикой.\r\n\r\nСтатика (static) — файлы, которые не относятся к исполняемым и загружаются для пользователя без изменений, но отвечают за стилизацию страницы и отображения user-friendly-интерфейсов. Такие файлы, как правило, лежат в директории static в корне проекта.\r\n\r\nДля работы со статикой в том же файле \r\nsettings.py\r\n добавьте следующие настройки:\r\n\r\n# Отвечает за формирование адреса доступа к статике\r\nSTATIC_URL = 'static/'\r\n# Отвечает за место на диске, откуда необходимо подгружать статику\r\nSTATICFILES_DIRS = (\r\n    BASE_DIR / 'static',\r\n)",
      "last_update": "2023-12-07T18:50:06Z"
    }
  },
  {
    "model": "selfedu.material",
    "pk": 13,
    "fields": {
      "chapter": 4,
      "name": "Преимущества Django",
      "image": "selfedu/3_dVwNYwo.jpg",
      "video": null,
      "description": "Django обладает рядом преимуществ, которые делают его привлекательным для разработчиков:\r\n\r\n Быстрый старт. Django позволяет быстро начать разработку благодаря своей архитектуре «из коробки». Он предлагает стандартные компоненты для работы с базами данных, формами, аутентификацией и многим другим.\r\n Большое количество встроенных модулей.\r\nВся сила Django заключается в наборе решений, которые он предоставляет. Так, из основных можно выделить:\r\n\r\n Framework — преимущество Django в том, что он является фреймворком и включает в себя большое количество решенных проблем.\r\n ORM — модуль работы с БД без использования SQL, а только средствами кода на Python.\r\n URL — встроенная маршрутизация, которая позволяет быстро настроить работу необходимых контроллеров по определенным адресам на сайте.\r\n Templates — встроенный инструмент шаблонизации, который позволяет создавать динамические страницы и выводить на них данные, переданные из контроллеров.\r\n Структура — сама по себе структура в Django взята из лучших практик написания кода на Python, поэтому «из коробки» фреймворк рассказывает нам, как писать правильно. К тому же можно посмотреть на исходный код фреймворка и там найти дополнительные лучшие практики оформления кода.\r\n Готовые модули: auth, cache, i18, admin и т. д.\r\nЭто далеко не все модули и функциональности, которые делают фреймворк отличным инструментом. В дальнейшем мы будем отдельно разбирать и углубляться в те модули, которые чаще всего помогают решать сложные и не очень бизнес-задачи. Бизнес-задачи бывают не только с конкретной функциональностью, но также с возможностью быстро создать и развивать продукт, иметь подстраховку разработчиков в виде большого сообщества, а также хорошую заменяемость и расширяемость команды.\r\n\r\n Уверенное продолжение. Считается, что Django хорош только для быстрого запуска, но много сервисов, которыми вы пользуетесь каждый день, написаны частично или полностью на Django: YouTube, Dropbox, Pinterest, Reddit и так далее.\r\n Большое сообщество. Django имеет одно из самых больших и активных сообществ среди веб-фреймворков. Это означает, что вы можете найти множество ресурсов, обучающих материалов, готовых решений и поддержку от других разработчиков.\r\n Отличная документация — обширная, хорошо структурированная, понятная и содержит множество примеров кода и подробных объяснений. Помимо официальной документации, есть множество переводов на русский язык, в которых содержится полезная и актуальная информации.\r\nВесь фреймворк Django представляет из себя 3 основные части:\r\n\r\n Базовая настройка — настройка в файле \r\nsettings.py\r\n и \r\nurls.py\r\n в директории с корневыми настройками проекта.\r\n Базы данных — выбор и подключение БД на основе задания на проект.\r\n Приложения — часть проекта, которая содержит основную логику проекта и отвечает за работу контроллеров, обработку данных и формирования отображения.",
      "last_update": "2023-12-07T18:50:50Z"
    }
  },
  {
    "model": "selfedu.testquestion",
    "pk": 5,
    "fields": {
      "material": 8,
      "question": "Что такое сеть?",
      "hint": ""
    }
  },
  {
    "model": "selfedu.testquestion",
    "pk": 6,
    "fields": {
      "material": 8,
      "question": "С помощью каких команд можно узнать IP-адрес?",
      "hint": ""
    }
  },
  {
    "model": "selfedu.testquestion",
    "pk": 7,
    "fields": {
      "material": 9,
      "question": "Что такое домен?",
      "hint": ""
    }
  },
  {
    "model": "selfedu.testquestion",
    "pk": 8,
    "fields": {
      "material": 9,
      "question": "Выберите свойства, которые характеризуют систему доменных имен.",
      "hint": ""
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 14,
    "fields": {
      "question": 5,
      "answer": "Объединение компьютеров или серверов, каждый из которых имеет свой уникальный адрес",
      "is_true": true
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 15,
    "fields": {
      "question": 5,
      "answer": "Локальное объединение компьютеров для хранения файлов и быстрого доступа к ним",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 16,
    "fields": {
      "question": 5,
      "answer": "Прямое соединение двух телефонов для передачи зашифрованного сигнала",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 17,
    "fields": {
      "question": 5,
      "answer": "Адрес для получения или передачи пакетов широковещательным способом",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 18,
    "fields": {
      "question": 6,
      "answer": "ipconfig",
      "is_true": true
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 19,
    "fields": {
      "question": 6,
      "answer": "ifconfig",
      "is_true": true
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 20,
    "fields": {
      "question": 6,
      "answer": "traceroute",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 21,
    "fields": {
      "question": 6,
      "answer": "ping",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 22,
    "fields": {
      "question": 6,
      "answer": "telnet",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 23,
    "fields": {
      "question": 6,
      "answer": "ip -a",
      "is_true": true
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 24,
    "fields": {
      "question": 7,
      "answer": "Часть веб-приложения, которая отвечает за обработку запросов",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 25,
    "fields": {
      "question": 7,
      "answer": "Специальная библиотека для написания веб-приложений",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 26,
    "fields": {
      "question": 7,
      "answer": "Уникальное имя для веб-приложения",
      "is_true": true
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 27,
    "fields": {
      "question": 7,
      "answer": "Хранилище паролей для сервера",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 28,
    "fields": {
      "question": 8,
      "answer": "Распределенная",
      "is_true": true
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 29,
    "fields": {
      "question": 8,
      "answer": "Централизованная",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 30,
    "fields": {
      "question": 8,
      "answer": "Динамическая",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 31,
    "fields": {
      "question": 8,
      "answer": "Резервируемая",
      "is_true": true
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 32,
    "fields": {
      "question": 8,
      "answer": "Фиксированная",
      "is_true": false
    }
  },
  {
    "model": "selfedu.testanswer",
    "pk": 33,
    "fields": {
      "question": 8,
      "answer": "Кешируемая",
      "is_true": true
    }
  },
  {
    "model": "users.user",
    "pk": 1,
    "fields": {
      "password": "pbkdf2_sha256$600000$4eyQlMyfchFuYUfZBiA9rj$oOWfzfdtVhxwj75kYfpNXuUNujWGj2ftzQz4CHC2O6k=",
      "last_login": "2023-11-24T21:34:31.767Z",
      "is_superuser": true,
      "first_name": "admin",
      "last_name": "Superuser",
      "is_staff": true,
      "is_active": true,
      "date_joined": "2023-11-24T21:34:10.160Z",
      "email": "admin@adminov.ru",
      "phone": null,
      "city": null,
      "avatar": "",
      "groups": [],
      "user_permissions": []
    }
  },
  {
    "model": "users.user",
    "pk": 2,
    "fields": {
      "password": "pbkdf2_sha256$600000$kjRvycHNgS7DvDqSMQhW0G$3SVtcfAJNC0mQRxzlbJTHTBLkRY/LiCwFPhRHUzbrko=",
      "last_login": null,
      "is_superuser": false,
      "first_name": "",
      "last_name": "",
      "is_staff": false,
      "is_active": true,
      "date_joined": "2023-12-07T12:34:19.136Z",
      "email": "ivan@ivanov.ru",
      "phone": null,
      "city": null,
      "avatar": "",
      "groups": [],
      "user_permissions": []
    }
  }
]